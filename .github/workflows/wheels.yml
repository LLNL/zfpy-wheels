name: Wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:  [windows-2019]

    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'da-wad/zfp'
          ref: '1.0.1'
          fetch-depth: 0

      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: aarch64

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp313-win_amd64 cp312-win_amd64 cp311-win_amd64 cp310-win_amd64 cp39-win_amd64
                       cp313-macosx_x86_64 cp312-macosx_x86_64 cp311-macosx_x86_64 cp310-macosx_x86_64 cp39-macosx_x86_64
                       cp313-macosx_arm64 cp312-macosx_arm64 cp311-macosx_arm64 cp310-macosx_arm64 cp39-macosx_arm64
                       cp313-manylinux_x86_64 cp312-manylinux_x86_64 cp311-manylinux_x86_64 cp310-manylinux_x86_64 cp39-manylinux_x86_64
                       cp313-manylinux_aarch64 cp312-manylinux_aarch64 cp311-manylinux_aarch64 cp310-manylinux_aarch64 cp39-manylinux_aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install numpy cython scikit-build cmake &
                             PYTHON_INCLUDE=$(python -c 'from sysconfig import get_paths; print(get_paths()[\"include\"])') &
                             PYTHON_LIB=$(python -c 'import sysconfig; print(sysconfig.get_config_var(\"LIBDIR\"))') &
                             mkdir build &
                             cd build &
                             cmake .. -G \"Visual Studio 16 2019\" -DBUILD_ZFPY=ON -DBUILD_TESTING=OFF -DPYTHON_LIBRARY=$PYTHON_LIB -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE -DBUILD_SHARED_LIBS=OFF &
                             cmake --build . --config Release &
                             cd .. &
                             python setup.py bdist_wheel"
          CIBW_BEFORE_BUILD_LINUX: pip install numpy cython scikit-build cmake;
                             PYTHON_INCLUDE=$(python -c 'from sysconfig import get_paths; print(get_paths()["include"])');
                             PYTHON_LIB=$(python -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR"))');
                             mkdir build;
                             cd build;
                             cmake .. -DBUILD_ZFPY=ON -DBUILD_TESTING=OFF -DPYTHON_LIBRARY=$PYTHON_LIB -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE;
                             make;
                             cd ..;
                             cp build/lib*/libzfp* /usr/local/lib64;
          CIBW_BEFORE_BUILD_MACOS: pip install numpy cython scikit-build cmake;
                             PYTHON_INCLUDE=$(python -c 'from sysconfig import get_paths; print(get_paths()["include"])');
                             PYTHON_LIB=$(python -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR"))');
                             rm -rf build;
                             mkdir build;
                             cd build;
                             cmake .. -DBUILD_ZFPY=ON -DBUILD_TESTING=OFF -DPYTHON_LIBRARY=$PYTHON_LIB -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE -DBUILD_SHARED_LIBS=ON;
                             make;
                             cd ..;
                             mkdir build/lib/Release;
                             cp -RP build/lib/libzfp.*  build/lib/Release;
                             ls build;
                             ls build/bin;
                             ls build/lib;
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
             otool -L /Users/runner/work/zfpy-wheels/zfpy-wheels/build/bin/zfpy.cpython-*-darwin.so &&
             otool -l /Users/runner/work/zfpy-wheels/zfpy-wheels/build/bin/zfpy.cpython-*-darwin.so &&
             DYLD_LIBRARY_PATH=/Users/runner/work/zfpy-wheels/zfpy-wheels/build/lib delocate-listdeps {wheel} &&
             DYLD_LIBRARY_PATH=/Users/runner/work/zfpy-wheels/zfpy-wheels/build/lib delocate-wheel --require-archs {delocate_archs} -v -w {dest_dir} {wheel}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse

  # upload weels as a single artefact
  upload-wheels:
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/upload-artifact/merge@v4
        with:
          name: wheels
          path: wheelhouse
          pattern: wheels-*
          separate-directories: false
          delete-merged: false
          
  publish:
    needs: upload-wheels
    name: Publish wheels to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheelhouse

      - name: Publish wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: wheelhouse
          skip-existing: true
