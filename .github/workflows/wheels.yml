name: Wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:  [ubuntu-20.04]

    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'llnl/zfp'
          ref: 'f39af72648a2aeb88e9b2cca8c64f51b493ad5f4'

      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp310-manylinux_aarch64 cp39-manylinux_aarch64 cp38-manylinux_aarch64 cp37-manylinux_aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install numpy cython scikit-build cmake &
                             PYTHON_INCLUDE=$(python -c 'from sysconfig import get_paths; print(get_paths()[\"include\"])') &
                             PYTHON_LIB=$(python -c 'import sysconfig; print(sysconfig.get_config_var(\"LIBDIR\"))') &
                             mkdir build &
                             cd build &
                             cmake .. -G \"Visual Studio 16 2019\" -DBUILD_ZFPY=ON -DBUILD_TESTING=OFF -DPYTHON_LIBRARY=$PYTHON_LIB -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE -DBUILD_SHARED_LIBS=OFF &
                             cmake --build . --config Release &
                             cd .. &
                             python setup.py bdist_wheel"
          CIBW_BEFORE_BUILD_LINUX: pip install numpy cython scikit-build cmake;
                             PYTHON_INCLUDE=$(python -c 'from sysconfig import get_paths; print(get_paths()["include"])');
                             PYTHON_LIB=$(python -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR"))');
                             mkdir build;
                             cd build;
                             cmake .. -DBUILD_ZFPY=ON -DBUILD_TESTING=OFF -DPYTHON_LIBRARY=$PYTHON_LIB -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE;
                             make;
                             cd ..;
                             cp build/lib*/libzfp* /usr/local/lib64;
          CIBW_BEFORE_BUILD_MACOS: pip install numpy cython scikit-build cmake;
                             PYTHON_INCLUDE=$(python -c 'from sysconfig import get_paths; print(get_paths()["include"])');
                             PYTHON_LIB=$(python -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR"))');
                             rm -rf build;
                             mkdir build;
                             cd build;
                             cmake .. -DBUILD_ZFPY=ON -DBUILD_TESTING=OFF -DPYTHON_LIBRARY=$PYTHON_LIB -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE -DBUILD_SHARED_LIBS=ON;
                             make;
                             cd ..;
                             mkdir build/lib/Release;
                             cp -RP build/lib/libzfp.*  build/lib/Release;
                             ls build;
                             ls build/bin;
                             ls build/lib;
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
             otool -L /Users/runner/work/zfpy-wheels/zfpy-wheels/build/bin/zfpy.cpython-*-darwin.so &&
             otool -l /Users/runner/work/zfpy-wheels/zfpy-wheels/build/bin/zfpy.cpython-*-darwin.so &&
             DYLD_LIBRARY_PATH=/Users/runner/work/zfpy-wheels/zfpy-wheels/build/lib delocate-listdeps {wheel} &&
             DYLD_LIBRARY_PATH=/Users/runner/work/zfpy-wheels/zfpy-wheels/build/lib delocate-wheel --require-archs {delocate_archs} -v -w {dest_dir} {wheel}

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  publish:
    needs: build_wheels
    name: Publish wheels to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Publish wheels to PyPI

        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: artifact
